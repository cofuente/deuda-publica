{"version":3,"sources":["Deuda.js","App.js","serviceWorker.js","index.js"],"names":["Deuda","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","totalInterest","interestIncrements","pageLoad","Date","interestRatePerMS","dateBaseline","debtBaseline","componentDidMount","bind","assertThisInitialized","componentWillUnmount","tick","_this2","timeSinceBaseline","totalInterestThusFar","setState","timerID","setInterval","clearInterval","deuda","Number","react_default","a","createElement","className","currency_format_default","value","toFixed","displayType","thousandSeparator","prefix","Component","App","Deuda_Deuda","href","target","rel","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"oRAGqBA,cACjB,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACdE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACTC,cAAe,EACfC,mBAAoB,EACpBC,SAAU,IAAIC,KACdC,kBAAmB,mBACnBC,aAAc,SACdC,aAAc,MAElBd,EAAKe,kBAAoBf,EAAKe,kBAAkBC,KAAvBf,OAAAgB,EAAA,EAAAhB,QAAAgB,EAAA,EAAAhB,CAAAD,KACzBA,EAAKkB,qBAAuBlB,EAAKkB,qBAAqBF,KAA1Bf,OAAAgB,EAAA,EAAAhB,QAAAgB,EAAA,EAAAhB,CAAAD,KAC5BA,EAAKmB,KAAOnB,EAAKmB,KAAKH,KAAVf,OAAAgB,EAAA,EAAAhB,QAAAgB,EAAA,EAAAhB,CAAAD,KAZEA,mFAeC,IAAAoB,EAAAjB,KACXkB,EAAoBlB,KAAKI,MAAMG,SAASP,KAAKI,MAAMM,aACnDS,EAAuBnB,KAAKI,MAAMK,kBAAoBS,EACtDZ,EAAoD,IAA/BN,KAAKI,MAAMK,kBACtCT,KAAKoB,SAAS,CAACf,cAAec,EAAsBb,mBAAoBA,IACxEN,KAAKqB,QAAUC,YACb,kBAAML,EAAKD,QACX,oDAKFO,cAAcvB,KAAKqB,wCAInBrB,KAAKoB,SAAS,SAAChB,EAAOR,GAAR,MAAmB,CAC/BS,cAAeD,EAAMC,cAAgBD,EAAME,uDAK7C,IAAMkB,EAAQC,OAAOzB,KAAKI,MAAMC,eAAiBL,KAAKI,MAAMO,aAC5D,OACEe,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,mBACXH,EAAAC,EAAAC,cAACE,EAAAH,EAAD,CAAgBE,UAAU,QAAQE,MAAOP,EAAMQ,QAAQ,GAAIC,YAAa,OAAQC,mBAAmB,EAAMC,OAAQ,eA1C1FC,aCsBpBC,0LAnBX,OACEX,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAClBH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,SAAb,oCACAH,EAAAC,EAAAC,cAACU,EAAD,MACEZ,EAAAC,EAAAC,cAAA,KACEC,UAAU,cACVU,KAAK,mCACLC,OAAO,SACPC,IAAI,uBAJN,kCAPQL,cCQZM,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,KAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBrD,QACf+C,UAAUC,cAAcQ,YAI1BC,QAAQC,IACN,gHAKEZ,GAAUA,EAAOa,UACnBb,EAAOa,SAASR,KAMlBM,QAAQC,IAAI,sCAGRZ,GAAUA,EAAOc,WACnBd,EAAOc,UAAUT,UAO5BU,MAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,KC1FjEC,IAASC,OAAO1C,EAAAC,EAAAC,cAACyC,EAAD,MAASC,SAASC,eAAe,SDgB1C,SAAkBrB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIqB,IAAIC,iBAAwB7B,OAAOC,SAASN,MACpDmC,SAAW9B,OAAOC,SAAS6B,OAIvC,OAGF9B,OAAO+B,iBAAiB,OAAQ,WAC9B,IAAM1B,EAAK,GAAA2B,OAAMH,iBAAN,sBAEP/B,GAgEV,SAAiCO,EAAOC,GAEtC2B,MAAM5B,GACHK,KAAK,SAAAwB,GAEJ,IAAMC,EAAcD,EAASE,QAAQC,IAAI,gBAEnB,MAApBH,EAASI,QACO,MAAfH,IAA8D,IAAvCA,EAAYI,QAAQ,cAG5ChC,UAAUC,cAAcgC,MAAM9B,KAAK,SAAAC,GACjCA,EAAa8B,aAAa/B,KAAK,WAC7BV,OAAOC,SAASyC,aAKpBtC,EAAgBC,EAAOC,KAG1Be,MAAM,WACLJ,QAAQC,IACN,mEArFAyB,CAAwBtC,EAAOC,GAI/BC,UAAUC,cAAcgC,MAAM9B,KAAK,WACjCO,QAAQC,IACN,+GAMJd,EAAgBC,EAAOC,MCvC/BE","file":"static/js/main.820c96ee.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport CurrencyFormat from 'react-currency-format'\n\nexport default class Deuda extends Component {\n    constructor(props){\n        super(props)\n        this.state = {\n            totalInterest: 0,\n            interestIncrements: 0,\n            pageLoad: new Date(),\n            interestRatePerMS: 0.155377980720446479124,  // this should be the anual interest rate (here I used 7) divided by 31536000000, the number of milliseconds in a year\n            dateBaseline: 1487160000000, // mid january 2017 announcement\n            debtBaseline: 7e+10, // 70,000,000,000\n        }\n        this.componentDidMount = this.componentDidMount.bind(this)\n        this.componentWillUnmount = this.componentWillUnmount.bind(this)\n        this.tick = this.tick.bind(this)\n    }\n\n    componentDidMount(){\n      const timeSinceBaseline = this.state.pageLoad-this.state.dateBaseline\n      const totalInterestThusFar = this.state.interestRatePerMS * timeSinceBaseline\n      const interestIncrements = this.state.interestRatePerMS * 100\n      this.setState({totalInterest: totalInterestThusFar, interestIncrements: interestIncrements })\n      this.timerID = setInterval(\n        () => this.tick(),\n        100\n      )\n    }\n\n    componentWillUnmount(){\n      clearInterval(this.timerID)\n    }\n\n    tick(){\n      this.setState((state, props) => ({\n        totalInterest: state.totalInterest + state.interestIncrements,\n      }))\n    }\n\n  render() {\n      const deuda = Number(this.state.totalInterest) + this.state.debtBaseline\n      return (\n        <div className=\"deuda-container\">\n          <p className=\"text-pop-up-top\">\n            <CurrencyFormat className=\"deuda\" value={deuda.toFixed(2)} displayType={'text'} thousandSeparator={true} prefix={'$'}  />\n          </p>\n        </div>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport Deuda from './Deuda'\nimport './App.css'\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n        <p className=\"intro\" >El pueblo puertorriqueño debe</p>\n        <Deuda />\n          <a\n            className=\"fuente-link\"\n            href=\"https://youtu.be/jiifirmvT4A?t=1\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Fuentes y Cálculos\n          </a>\n        </header>\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register()\n"],"sourceRoot":""}